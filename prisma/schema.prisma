// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"  // Changed from "sqlite"
  url      = env("DATABASE_URL")
}

// Keep all your existing models as they are
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  role      Role     @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  projects  Project[]
  blogs     Blog[]
}

model Project {
  id          String      @id @default(cuid())
  title       String
  description String
  type        ProjectType
  status      ProjectStatus @default(IN_PROGRESS)
  imageUrl    String?
  githubUrl   String?
  liveUrl     String?
  featured    Boolean     @default(false)
  published   Boolean     @default(false)
  authorId    String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  author      User        @relation(fields: [authorId], references: [id], onDelete: Cascade)
  blogs       ProjectBlog[]
  projectTags ProjectTag[]
}

model Blog {
  id          String   @id @default(cuid())
  title       String
  slug        String   @unique
  content     String
  excerpt     String?
  imageUrl    String?
  published   Boolean  @default(false)
  featured    Boolean  @default(false)
  authorId    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  author      User         @relation(fields: [authorId], references: [id], onDelete: Cascade)
  projectBlogs ProjectBlog[]
  blogTags    BlogTag[]
}

model ProjectBlog {
  id        String   @id @default(cuid())
  projectId String
  blogId    String
  createdAt DateTime @default(now())
  
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  blog      Blog    @relation(fields: [blogId], references: [id], onDelete: Cascade)
  
  @@unique([projectId, blogId])
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now())
  
  projectTags ProjectTag[]
  blogTags    BlogTag[]
}

model ProjectTag {
  projectId String
  tagId     String
  
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  tag     Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([projectId, tagId])
}

model BlogTag {
  blogId String
  tagId  String
  
  blog Blog @relation(fields: [blogId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@id([blogId, tagId])
}

enum Role {
  USER
  ADMIN
}

enum ProjectType {
  PROFESSIONAL
  PERSONAL
}

enum ProjectStatus {
  IN_PROGRESS
  COMPLETED
  ON_HOLD
}